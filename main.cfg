/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');

/* System stack size (used by ISRs and Swis) */
Program.stack = 1024;

/*
 * Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 2;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.swiEnabled = true;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;

/* No memory allocation occurs, so no heap is needed */
BIOS.heapSize = 16384;

/* No runtime stack checking is performed */
Task.checkStackFlag = false;
Hwi.checkStackFlag = false;

/* Reduce the number of task priorities */
Task.numPriorities = 4;

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loadLoggerSize = 256;
LoggingSetup.mainLoggerSize = 512;
LoggingSetup.sysbiosLoggerSize = 1024;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
var GPIO = xdc.useModule('ti.drivers.GPIO');
var UART = xdc.useModule('ti.drivers.UART');
Hwi.dispatcherSwiSupport = true;
Clock.tickPeriod = 5000;
Clock.timerId = 0;
Clock.swiPriority = 14;
var task0Params = new Task.Params();
task0Params.instance.name = "RxCmd";
task0Params.priority = 1;
Program.global.RxCmd = Task.create("&RXCmdTask", task0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "RXSema";
semaphore1Params.mode = Semaphore.Mode_BINARY;
Program.global.RXSema = Semaphore.create(null, semaphore1Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timer1";
timer0Params.period = 10;
timer0Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer0Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.timer1 = Timer.create(1, "&LineSensorInput_ISR", timer0Params);
var timer2Params = new Timer.Params();
timer2Params.instance.name = "timer2";
timer2Params.period = 200;
timer2Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer2Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
Program.global.timer2 = Timer.create(2, "&LineSensorRead_ISR", timer2Params);
var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "SensorSema";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.SensorSema = Semaphore.create(null, semaphore2Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "SensorSemaAlpha";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.SensorSemaAlpha = Semaphore.create(null, semaphore3Params);
Clock.tickSource = Clock.TickSource_TIMER;
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "encoderISR";
hwi0Params.enableInt = true;
Program.global.encoderISR = Hwi.create(16, "&encoder_ISR", hwi0Params);
var task0Params0 = new Task.Params();
task0Params0.instance.name = "Drive";
task0Params0.priority = 1;
Program.global.Drive = Task.create("&Drive_Task", task0Params0);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 10;
Program.global.clock0 = Clock.create("&Drive_Clock", 1, clock0Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "DriveSema";
semaphore4Params.mode = Semaphore.Mode_BINARY;
Program.global.DriveSema = Semaphore.create(null, semaphore4Params);
Program.heap = 2048;
var semaphore5Params0 = new Semaphore.Params();
semaphore5Params0.instance.name = "IR_FrontSema";
semaphore5Params0.mode = Semaphore.Mode_BINARY;
Program.global.IR_FrontSema = Semaphore.create(null, semaphore5Params0);
var timer3Params = new Timer.Params();
timer3Params.instance.name = "timer3";
timer3Params.period = 900000;
timer3Params.startMode = xdc.module("ti.sysbios.interfaces.ITimer").StartMode_USER;
timer3Params.runMode = xdc.module("ti.sysbios.interfaces.ITimer").RunMode_ONESHOT;
timer3Params.arg = null;
Program.global.timer3 = Timer.create(3, "&takePic", timer3Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "CameraSema";
semaphore5Params.mode = Semaphore.Mode_BINARY;
Program.global.CameraSema = Semaphore.create(null, semaphore5Params);
